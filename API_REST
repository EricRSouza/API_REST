from airflow import DAG
from airflow.operators.python_operator import PythonOperator
from airflow.hooks.postgres_hook import PostgresHook
import pandas as pd
import numpy as np
from datetime import datetime, timedelta, date
import time
import requests
import os


default_args = {
   'owner': 'airflow',
   'depends_on_past': False,
   'start_date': datetime(2020, 10, 21),
   'max_active_runs': 1,
   'email': ['r.farias@senff.com.br'],
   'email_on_failure': False,
   'email_on_retry': False,
   'retries': 0,
   'retry_delay': timedelta(minutes=50),
}

dag = DAG(dag_id='api_privacytools',catchup=False, default_args=default_args,
         schedule_interval="0 7 * * *"  )  


# Função para pegar o arquivo mais novo da pasta
def get_date(folder):
   """Retorna a data do arquivo mais recente e diminui 7 dias"""
   #print('---->',folder)
   # Cria uma lista apenas com arquivos da pasta
   files = [os.path.join(folder, file) for file in os.listdir(folder) if os.path.isfile(os.path.join(folder, file))]
   # Ordena a lista pelo horário da última modificação do arquivo
   order_files = sorted(files, key=lambda x: os.path.basename(x), reverse=True)
   # busca o caminho do arquivo mais recente
   newest_file = order_files[0]
   # Extrai o nome do arquivo
   file_name = os.path.basename(newest_file)
   # Converte a data do nome do arquivo para datetime
   file_name = file_name.replace("\\","")
   #print('---->',file_name[:10])
   file_date = datetime.strptime(file_name[:10], '%Y-%m-%d').date()
   return file_date - timedelta(days=7)

def transform_dataframe(dataframe):
   """Retorna um dataframe com as colunas selecionadas"""
   columns = ['identityHash','hashConsent','origin','status','creationDate','retentionDate','authorizationDate','revokeDate','changeDate','group_code','group_name','template_code','template_hash','template_title','person_dateInserted','person_document','person_email','person_externalId','person_hash','person_name','person_origin','person_phoneNumber']
   return pd.DataFrame(dataframe, columns=columns).astype(str)

def format_date(date):
   """Retorna a data formatada para a URL"""
   return date.strftime("%d-%m-%Y 00:00").replace(" ", "%20").replace(":", "%3A")

def get_access_token(client_id, client_secret, payload):
   """Retorna o token de autorização da API"""
   token_url = "https://dpo.privacytools.com.br/external_api_v2/oauth/token"
   headers = {'Content-Type': 'application/x-www-form-urlencoded'}
   response = requests.request(
       "POST", token_url, headers=headers, data=payload, auth=(client_id, client_secret)
   ).json()
   return response['access_token'], response['token_type']

def get_data_from_api(headers, endpoint, startdate, enddate, limit=200, page=0):
   """Retorna um Dataframe com os dados da requisição da API"""
   df = pd.DataFrame()
   while True:
       url = f'{endpoint}{enddate}&limit={limit}&offset={page}&startDate={startdate}'
       response = requests.get(url, headers=headers).json()
       data = pd.json_normalize(response, errors='ignore', sep='_', record_path=['items'])
       if data.empty:
           break
       data = transform_dataframe(data)
       df = pd.concat([df, data])
       page += 1
   return df

def clean_columns(df, colum):
   for col in colum:
       # substituindo valores nulos e ausentes por None
       df[col] = df[col].replace({np.nan: 0, "nan": 0, "None": 0, None: 0}).astype(float)
       # formatando as colunas
       # df[col] = pd.to_datetime(df[col], unit='ms').dt.strftime('%Y-%m-%dT%H:%M:%S')
       df[col] = df[col].apply(lambda x: datetime.fromtimestamp(x/1000.0).strftime('%Y-%m-%dT%H:%M:%S'))
       # substituindo valores zero convertidos de None e nan por None novamente
       df[col] = df[col].replace("1970-01-01T00:00:00", None)
       # convertendo para string para o Dremio
       df[col] = df[col].astype(str)
   return df

def add_cpf(row):
    if row['group_name'] == 'Termos/Políticas':
        return row['identityHash']
    else:
        return row['person_document']

def get_privacy (**kwargs):
   execution_date = kwargs['execution_date'].strftime('%Y-%m-%d')
   #print('----> 01')
   # Dados necessários para a requisição na API
   client_id = "123"
   client_secret = "abc"
   payload = {
       "username": "123",
       "password": "abc",
       "grant_type": "password",
   }
   # Caminho do Arquivos
   folder = fr"/dados/privacy/consentimentos/"
   # endpoints de consulta
   endpoint_new = f'https://dpo.privacytools.com.br/external_api_v2/consent/find/?endDate='
   endpoint_change = f'https://dpo.privacytools.com.br/external_api_v2/consent/find/fixed?finalDate='
   # Buscando Chave de Autenticação
   access_token, token_type = get_access_token(client_id, client_secret, payload)
   headers_data = {
       'accept': '*/*',
       'Authorization': f'{token_type} {access_token}'
   }
   # Selecionando até qual data iram rodar o código
   today = datetime.datetime.today().date()  
   # Buscar data do ultimo arquivo
   file_date = get_date(folder)  
   # Looping para gerar um arquivo por dia
   while today > file_date:
       # Calcula as datas de startdate e enddate da requisição
       startdate_formatted = format_date(file_date)
       enddate_formatted = format_date(file_date + timedelta(days=1))
       # Buscando dados da requisição NEW
       df_new = get_data_from_api(headers_data, endpoint_new, startdate_formatted, enddate_formatted)
       # Buscando dados da requisição CHANGED
       df_changed = get_data_from_api(headers_data, endpoint_change, startdate_formatted, enddate_formatted)
       # Unindo os dados dos 2 endpoints
       df = pd.concat([df_new,df_changed])
       #Corrigindo datas para o formato %Y-%m-%dT%H:%M:%S
       date_cols = ['creationDate', 'retentionDate', 'authorizationDate', 'revokeDate', 'changeDate']
       df = clean_columns(df, date_cols)
       # Corrigir coluna CPF
       df['cpf'] = df.apply(add_cpf, axis=1)
       # Salvando o arquivo
       df.to_parquet(fr'{folder}/{file_date}_consentimento.gzip',compression='gzip')
       file_date = file_date + timedelta(days=1)

task_get_privacy = PythonOperator(
   task_id='get_privacy',
   provide_context=True,
   python_callable=get_privacy,        
   dag=dag
   )


task_get_privacy
